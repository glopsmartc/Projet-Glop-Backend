name: CI/CD Pipeline Prod

on:
  push:
    branches:
      - main

env:
  IP_ADDRESS_BACK: ${{ secrets.IP_ADDRESS_BACK }}
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

jobs:
  compile-GestionUtilisateursService:
    if: contains(github.event.head_commit.message, 'GestionDesUtilisateursService/') || contains(github.event.head_commit.files, 'GestionDesUtilisateursService/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for compilation
      - name: Set up JDK 21 for GestionUtilisateursService
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Compile the GestionUtilisateursService
      - name: Compile GestionUtilisateursService
        working-directory: ./GestionDesUtilisateursService
        run: |
          mvn clean compile
          echo "Compilation successful"

  sonarcloud-analysis-GestionUtilisateursService:
    if: contains(github.event.head_commit.message, 'GestionDesUtilisateursService/') || contains(github.event.head_commit.files, 'GestionDesUtilisateursService/')
    runs-on: ubuntu-latest
    needs: compile-GestionUtilisateursService

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21 for SonarCloud Analysis
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and SonarCloud analysis
        working-directory: ./GestionDesUtilisateursService
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_SECRET }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.organization=glopsmartc -Dsonar.projectKey=glopsmartc_Projet-Glop-Backend -Dsonar.projectBaseDir=./GestionDesUtilisateursService  -Dsonar.sources=./src

  build-GestionUtilisateursService:
    if: contains(github.event.head_commit.message, 'GestionDesUtilisateursService/') || contains(github.event.head_commit.files, 'GestionDesUtilisateursService/')
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis-GestionUtilisateursService

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for backend tests for GestionUtilisateursService
      - name: Set up JDK 21 for GestionUtilisateursService
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Set up Profile Production
      - name: Set production profile
        run: |
          sed -i 's/spring.profiles.active=dev/spring.profiles.active=prod/g' ./GestionDesUtilisateursService/src/main/resources/application.properties

      # Docker configuration
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./GestionDesUtilisateursService
          file: ./GestionDesUtilisateursService/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend-gestion-utilisateurs:${{ github.sha }}

  deploy-GestionUtilisateursService:
    if: contains(github.event.head_commit.message, 'GestionDesUtilisateursService/') || contains(github.event.head_commit.files, 'GestionDesUtilisateursService/')
    needs: build-GestionUtilisateursService
    runs-on: ubuntu-latest

    steps:
      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
          wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
          unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip

      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Create ma-paire.pem file
        run: echo "${{ secrets.MA_PAIRE_PEM }}" > ma-paire.pem

      - name: Set permissions for private key
        run: chmod 600 ma-paire.pem

      - name: Stop and Remove Existing Container GestionUtilisateursService
        run: |
         ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker stop backend-gestion-utilisateurs || true && sudo docker rm backend-gestion-utilisateurs || true'

      - name: Pull Backend Docker Image GestionUtilisateursService
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend-gestion-utilisateurs:${{ github.sha }}'

      - name: Run New Backend Container GestionUtilisateursService
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker run -d --name backend-gestion-utilisateurs -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" -e EMAIL_USERNAME="${{ secrets.EMAIL_USERNAME }}" -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" -e IP_ADDRESS_BACK="${{ secrets.IP_ADDRESS_FRONT }}" -e IP_ADDRESS_BACK="${{ secrets.IP_ADDRESS_FRONT }}" -p 80:8081 -v /docker-volumes/backend-gestion-contrats:/app/data ${{ secrets.DOCKER_USERNAME }}/backend-gestion-utilisateurs:${{ github.sha }}'

  compile-GestionContratsService:
    if: contains(github.event.head_commit.message, 'GestionDesContratsService/') || contains(github.event.head_commit.files, 'GestionDesContratsService/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for compilation
      - name: Set up JDK 21 for GestionDesContratsService
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Compile the GestionContratsService
      - name: Compile GestionContratsService
        working-directory: ./GestionDesContratsService
        run: |
          mvn clean compile
          echo "Compilation successful"

  sonarcloud-analysis-GestionContratsService:
    if: contains(github.event.head_commit.message, 'GestionDesContratsService/') || contains(github.event.head_commit.files, 'GestionDesContratsService/')
    runs-on: ubuntu-latest
    needs: compile-GestionContratsService

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21 for SonarCloud Analysis
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and SonarCloud analysis
        working-directory: ./GestionDesContratsService
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_SECRET }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.organization=glopsmartc -Dsonar.projectKey=glopsmartc_Projet-Glop-Backend -Dsonar.projectBaseDir=./GestionDesContratsService  -Dsonar.sources=./src

  build-GestionContratsService:
    if: contains(github.event.head_commit.message, 'GestionDesContratsService/') || contains(github.event.head_commit.files, 'GestionDesContratsService/')
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis-GestionContratsService

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for backend tests for GestionContratsService
      - name: Set up JDK 21 for GestionContratsService
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Set up Profile Production
      - name: Set production profile
        run: |
          sed -i 's/spring.profiles.active=dev/spring.profiles.active=prod/g' ./GestionDesContratsService/src/main/resources/application.properties

      # Docker configuration
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./GestionDesContratsService
          file: ./GestionDesContratsService/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend-gestion-contrats:${{ github.sha }}

  deploy-GestionContratsService:
    if: contains(github.event.head_commit.message, 'GestionDesContratsService/') || contains(github.event.head_commit.files, 'GestionDesContratsService/')
    needs: build-GestionContratsService
    runs-on: ubuntu-latest

    steps:
      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
          wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
          unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip

      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Create ma-paire.pem file
        run: echo "${{ secrets.MA_PAIRE_PEM }}" > ma-paire.pem

      - name: Set permissions for private key
        run: chmod 600 ma-paire.pem

      - name: Stop and Remove Existing Container GestionContratsService
        run: |
         ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker stop backend-gestion-contrats || true && sudo docker rm backend-gestion-contrats || true'

      - name: Pull Backend Docker Image GestionContratsService
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend-gestion-contrats:${{ github.sha }}'

      - name: Run New Backend Container GestionContratsService
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker run -d --name backend-gestion-contrats -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" -e EMAIL_USERNAME="${{ secrets.EMAIL_USERNAME }}" -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" -e IP_ADDRESS_BACK="${{ secrets.IP_ADDRESS_FRONT }}" -e IP_ADDRESS_BACK="${{ secrets.IP_ADDRESS_FRONT }}" -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/backend-gestion-contrats:${{ github.sha }}'
